{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/cia/cia.component.html","webpack:///./src/app/cia/cia.component.scss","webpack:///./src/app/cia/cia.component.ts","webpack:///./src/app/controls/controls.component.html","webpack:///./src/app/controls/controls.component.scss","webpack:///./src/app/controls/controls.component.ts","webpack:///./src/app/cpu/cpu.component.html","webpack:///./src/app/cpu/cpu.component.scss","webpack:///./src/app/cpu/cpu.component.ts","webpack:///./src/app/emulator/emulator.component.html","webpack:///./src/app/emulator/emulator.component.scss","webpack:///./src/app/emulator/emulator.component.ts","webpack:///./src/app/logs/logs.component.html","webpack:///./src/app/logs/logs.component.scss","webpack:///./src/app/logs/logs.component.ts","webpack:///./src/app/memory/memory.component.html","webpack:///./src/app/memory/memory.component.scss","webpack:///./src/app/memory/memory.component.ts","webpack:///./src/app/models/cpustate.model.ts","webpack:///./src/app/models/emulatorstate.model.ts","webpack:///./src/app/models/tablerow.model.ts","webpack:///./src/app/models/telemetry.model.ts","webpack:///./src/app/services/tablehelper.service.ts","webpack:///./src/app/services/telemetry.service.ts","webpack:///./src/app/services/websocket.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n    <mat-toolbar-row>\\n      <app-controls></app-controls>\\n      <span class=\\\"example-spacer\\\"></span>\\n      <mat-icon class=\\\"example-icon\\\">pets</mat-icon>\\n    </mat-toolbar-row>\\n  </mat-toolbar>\\n\\n  <div style=\\\"padding:20px;\\\">\\n    <app-emulator></app-emulator>\\n    <app-cpu></app-cpu>\\n    <app-cia></app-cia>\\n    <app-memory></app-memory>\\n  </div>\\n\\n<router-outlet></router-outlet>\\n\"","module.exports = \".example-icon {\\n  padding: 0 14px; }\\n\\n.example-spacer {\\n  flex: 1 1 auto; }\\n\\napp-emulator, app-cpu {\\n  margin-right: 20px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFlLEVBQUE7O0FBR2pCO0VBQ0UsY0FBYyxFQUFBOztBQUdqQjtFQUNHLGtCQUFrQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGUtaWNvbiB7XG4gICAgcGFkZGluZzogMCAxNHB4O1xuICB9XG5cbiAgLmV4YW1wbGUtc3BhY2VyIHtcbiAgICBmbGV4OiAxIDEgYXV0bztcbiAgfVxuXG4gYXBwLWVtdWxhdG9yLCBhcHAtY3B1IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG4gIH0iXX0= */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'WebUI';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LogsComponent } from './logs/logs.component';\nimport { WebsocketService } from './services/websocket.service';\nimport { TelemetryService } from './services/telemetry.service';\nimport { CPUComponent } from './cpu/cpu.component';\nimport { MemoryComponent } from './memory/memory.component';\nimport { EmulatorComponent } from './emulator/emulator.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { ControlsComponent } from './controls/controls.component';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatCardModule} from '@angular/material/card';\nimport { CiaComponent } from './cia/cia.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LogsComponent,\n    CPUComponent,\n    MemoryComponent,\n    EmulatorComponent,\n    ControlsComponent,\n    CiaComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatTableModule,\n    MatGridListModule,\n    MatCardModule\n  ],\n  providers: [WebsocketService, TelemetryService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<mat-card class=\\\"example-card\\\">\\n  <mat-card-header>\\n      <mat-card-title>CIA</mat-card-title>\\n      <mat-card-subtitle>Chip states</mat-card-subtitle>\\n  </mat-card-header>\\n\\n  <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n      <ng-container matColumnDef=\\\"name\\\">\\n          <th mat-header-cell *matHeaderCellDef> CIA Property </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Name}} </td>\\n      </ng-container>\\n\\n      <ng-container matColumnDef=\\\"value\\\">\\n          <th mat-header-cell *matHeaderCellDef> Value </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Value}} </td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <mat-card-content>\\n      <p>\\n\\n      </p>\\n  </mat-card-content>\\n</mat-card>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.mat-header-row {\\n  display: none; }\\n\\nmat-card {\\n  width: 320px;\\n  display: inline-block; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc3JjL2FwcC9jaWEvY2lhLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBVyxFQUFBOztBQUViO0VBQWlCLGFBQVksRUFBQTs7QUFFN0I7RUFDRSxZQUFZO0VBQ1oscUJBQXFCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9jaWEvY2lhLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5tYXQtaGVhZGVyLXJvdyB7ZGlzcGxheTpub25lO31cblxuICBtYXQtY2FyZCB7XG4gICAgd2lkdGg6IDMyMHB4O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { TelemetryService } from '../services/telemetry.service';\nimport { TablehelperService } from '../services/tablehelper.service';\nimport { Telemetry } from '../models/telemetry.model';\n\n@Component({\n  selector: 'app-cia',\n  templateUrl: './cia.component.html',\n  styleUrls: ['./cia.component.scss']\n})\nexport class CiaComponent implements OnInit {\n\n  public displayedColumns: string[] = ['name', 'value'];\n  public dataSource: any;\n\n  constructor(private telemetryService: TelemetryService, private helper: TablehelperService) {\n    telemetryService.getTelemetry().subscribe((t: string) => {\n      const telemetry: Telemetry = JSON.parse(t);\n      if (telemetry.Command === 'GetCIAState') {\n        this.dataSource = helper.convertToTableRowsWithBlackList(JSON.parse(atob(telemetry.Payload)), ['Keyboard_matrix']);\n      }\n    });\n   }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<p>\\n  <button *ngIf=\\\"state.PauseFlag\\\" (click)=\\\"startEmulator()\\\" title=\\\"Start emulator\\\" mat-button ><mat-icon class=\\\"build\\\">play_arrow</mat-icon></button>\\n  <button *ngIf=\\\"!state.PauseFlag\\\" (click)=\\\"stopEmulator()\\\" title=\\\"Pause emulator\\\" mat-button ><mat-icon class=\\\"build\\\">pause_arrow</mat-icon></button>\\n  <button (click)=\\\"executeNext()\\\" title=\\\"Execute next\\\" mat-button ><mat-icon class=\\\"build\\\">skip_next</mat-icon></button>\\n  <button (click)=\\\"getCPUState()\\\" title=\\\"Get CPU state\\\" mat-button ><mat-icon class=\\\"build\\\">memory</mat-icon></button>\\n  <button (click)=\\\"getEmulatorState()\\\" title=\\\"Get Emulator state\\\" mat-button ><mat-icon class=\\\"build\\\">computer</mat-icon></button>\\n  <button (click)=\\\"getCIAState()\\\" title=\\\"Get CIA state\\\" mat-button ><mat-icon class=\\\"build\\\">keyboard</mat-icon></button>\\n  <button (click)=\\\"getMemoryContent()\\\" title=\\\"Get memory content\\\" mat-button ><mat-icon class=\\\"build\\\">sd_card</mat-icon></button>\\n  <!-- <button (click)=\\\"reconnect()\\\" title=\\\"Reconnect\\\" mat-button ><mat-icon class=\\\"build\\\">cached</mat-icon></button> -->\\n\\n  <input #box>\\n  <button (click)=\\\"setBreakpoint(box.value)\\\" mat-button >Set breakpoint</button>\\n\\n</p>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbnRyb2xzL2NvbnRyb2xzLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { EmulatorState } from '../models/emulatorstate.model';\nimport { TelemetryService } from '../services/telemetry.service';\nimport { Telemetry } from '../models/telemetry.model';\n\n@Component({\n  selector: 'app-controls',\n  templateUrl: './controls.component.html',\n  styleUrls: ['./controls.component.scss']\n})\nexport class ControlsComponent implements OnInit {\n\n  latestMessage: string;\n  public state: EmulatorState;\n\n  constructor(private telemetryService: TelemetryService) {\n    this.state = new EmulatorState();\n\n    telemetryService.getTelemetry().subscribe((t: string) => {\n      const telemetry: Telemetry = JSON.parse(t);\n\n      if (telemetry.Command === 'GetEmulatorState') {\n        this.state = JSON.parse(atob(telemetry.Payload));\n      }\n    });\n   }\n\n  ngOnInit() {\n  }\n\n  setBreakpoint(value: string) {\n    const telemetryRequest = new Telemetry();\n    telemetryRequest.Command = 'SetBreakpoint';\n    // convert from hex to dec\n    const dec = parseInt(value, 16);\n    // set the decimal number as a parameter on the command\n    telemetryRequest.Parameter = dec.toString();\n    this.telemetryService.sendCommand(telemetryRequest);\n  }\n\n  startEmulator() {\n    console.log('start emulator called');\n    this.telemetryService.sendStringCommand('Start');\n\n    this.refreshAll();\n  }\n\n  stopEmulator() {\n    console.log('stop emulator called');\n    this.telemetryService.sendStringCommand('Stop');\n\n    this.refreshAll();\n  }\n\n  executeNext() {\n    console.log('execute next instruction called');\n    this.telemetryService.sendStringCommand('ExecuteNext');\n\n    this.refreshAll();\n  }\n\n  getCPUState() {\n    console.log('get CPU state called');\n    this.telemetryService.sendStringCommand('GetCPUState');\n  }\n\n  getCIAState() {\n    console.log('get CIA state called');\n    this.telemetryService.sendStringCommand('GetCIAState');\n  }\n\n  getEmulatorState() {\n    console.log('get Emulator state called');\n    this.telemetryService.sendStringCommand('GetEmulatorState');\n  }\n\n  getMemoryContent() {\n    console.log('get Memory content called');\n    this.telemetryService.sendStringCommand('GetMemoryContent');\n  }\n\n  refreshAll() {\n    setTimeout(() => {\n      this.telemetryService.sendStringCommand('GetCPUState');\n    }, 50);\n\n    setTimeout(() => {\n      this.telemetryService.sendStringCommand('GetCIAState');\n    }, 75);\n\n    setTimeout(() => {\n      this.telemetryService.sendStringCommand('GetEmulatorState');\n    }, 100);\n\n    setTimeout(() => {\n      this.telemetryService.sendStringCommand('GetMemoryContent');\n    }, 125);\n  }\n\n}\n","module.exports = \"<mat-card class=\\\"example-card\\\">\\n    <mat-card-header>\\n        <mat-card-title>CPU</mat-card-title>\\n        <mat-card-subtitle>Register states</mat-card-subtitle>\\n    </mat-card-header>\\n\\n    <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef> CPU Property </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Name}} </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"value\\\">\\n            <th mat-header-cell *matHeaderCellDef> Value </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Value}} </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n\\n    <mat-card-content>\\n        <p>\\n\\n        </p>\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.mat-header-row {\\n  display: none; }\\n\\nmat-card {\\n  width: 300px;\\n  display: inline-block; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc3JjL2FwcC9jcHUvY3B1LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBVyxFQUFBOztBQUViO0VBQWlCLGFBQVksRUFBQTs7QUFFN0I7RUFDRSxZQUFZO0VBQ1oscUJBQXFCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9jcHUvY3B1LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG4gIC5tYXQtaGVhZGVyLXJvdyB7ZGlzcGxheTpub25lO31cblxuICBtYXQtY2FyZCB7XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgfSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { TelemetryService } from '../services/telemetry.service';\nimport { Telemetry } from '../models/telemetry.model';\nimport { CPUState } from '../models/cpustate.model';\nimport { TableRow } from '../models/tablerow.model';\nimport { TablehelperService } from '../services/tablehelper.service';\n\n@Component({\n  selector: 'app-cpu',\n  templateUrl: './cpu.component.html',\n  styleUrls: ['./cpu.component.scss']\n})\nexport class CPUComponent implements OnInit {\n\n  public displayedColumns: string[] = ['name', 'value'];\n  public dataSource: any;\n\n  constructor(private telemetryService: TelemetryService, private helper: TablehelperService) {\n    telemetryService.getTelemetry().subscribe((t: string) => {\n      const telemetry: Telemetry = JSON.parse(t);\n      if (telemetry.Command === 'GetCPUState') {\n        this.dataSource = helper.convertToTableRows(JSON.parse(atob(telemetry.Payload)));\n      }\n    });\n   }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n<mat-card class=\\\"example-card\\\">\\n    <mat-card-header>\\n        <mat-card-title>Emulator</mat-card-title>\\n        <mat-card-subtitle>States</mat-card-subtitle>\\n    </mat-card-header>\\n\\n\\n    <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef> Emulator State </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Name}} </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"value\\\">\\n            <th mat-header-cell *matHeaderCellDef> Value </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Value}} </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n\\n\\n    <mat-card-content>\\n        <p>\\n\\n        </p>\\n    </mat-card-content>\\n</mat-card>\\n\\n\\n\\n\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.mat-header-row {\\n  display: none; }\\n\\nmat-card {\\n  width: 300px;\\n  display: inline-block; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc3JjL2FwcC9lbXVsYXRvci9lbXVsYXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQVcsRUFBQTs7QUFHYjtFQUFpQixhQUFZLEVBQUE7O0FBRTdCO0VBQ0UsWUFBWTtFQUNaLHFCQUFxQixFQUFBIiwiZmlsZSI6InNyYy9hcHAvZW11bGF0b3IvZW11bGF0b3IuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAubWF0LWhlYWRlci1yb3cge2Rpc3BsYXk6bm9uZTt9XG5cbiAgbWF0LWNhcmQge1xuICAgIHdpZHRoOiAzMDBweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { TelemetryService } from '../services/telemetry.service';\nimport { Telemetry } from '../models/telemetry.model';\nimport { EmulatorState } from '../models/emulatorstate.model';\nimport { TablehelperService } from '../services/tablehelper.service';\n\n@Component({\n  selector: 'app-emulator',\n  templateUrl: './emulator.component.html',\n  styleUrls: ['./emulator.component.scss']\n})\nexport class EmulatorComponent implements OnInit {\n\n  public displayedColumns: string[] = ['name', 'value'];\n  public dataSource: any;\n\n  constructor(private telemetryService: TelemetryService, private helper: TablehelperService) {\n\n    telemetryService.getTelemetry().subscribe((t: string) => {\n      const telemetry: Telemetry = JSON.parse(t);\n\n      if (telemetry.Command === 'GetEmulatorState') {\n        const emuState: EmulatorState = JSON.parse(atob(telemetry.Payload));\n        emuState.CycleCount += ' '; // HACK: force this variable to be a string to avoid hex conversion\n        this.dataSource = helper.convertToTableRows(emuState);\n      }\n    });\n   }\n\n  ngOnInit() {\n  }\n}\n","module.exports = \"<p>\\n    <button (click)=\\\"startEmulator()\\\" mat-button >Start</button>\\n    <button (click)=\\\"stopEmulator()\\\" mat-button >Stop</button>\\n    <button (click)=\\\"executeNext()\\\" mat-button >Execute Next</button>\\n    <button (click)=\\\"getCPUState()\\\" mat-button >Get CPU State</button>\\n    <button (click)=\\\"getEmulatorState()\\\" mat-button >Get Emulator State</button>\\n    <button (click)=\\\"getMemoryContent()\\\" mat-button >Get Memory Content</button>\\n\\n    <br/>\\n  {{ latestMessage }}\\n\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xvZ3MvbG9ncy5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { TelemetryService } from '../services/telemetry.service';\nimport { Telemetry } from '../models/telemetry.model';\n\n@Component({\n  selector: 'app-logs',\n  templateUrl: './logs.component.html',\n  styleUrls: ['./logs.component.scss']\n})\nexport class LogsComponent implements OnInit {\n\n  latestMessage: string;\n\n  constructor(private telemetryService: TelemetryService) {\n    telemetryService.getTelemetry().subscribe((t: string) => {\n      const telemetry: Telemetry = JSON.parse(t);\n      console.log(telemetry);\n      console.log(atob(telemetry.Payload));\n      // console.log(\"message received\");\n      this.latestMessage = atob(telemetry.Payload);\n    });\n   }\n\n  ngOnInit() {\n  }\n\n  startEmulator() {\n    console.log('start emulator called');\n    this.telemetryService.sendStringCommand('Start');\n  }\n\n  stopEmulator() {\n    console.log('stop emulator called');\n    this.telemetryService.sendStringCommand('Stop');\n  }\n\n  executeNext() {\n    console.log('execute next instruction called');\n    this.telemetryService.sendStringCommand('ExecuteNext');\n  }\n\n  getCPUState() {\n    console.log('get CPU state called');\n    this.telemetryService.sendStringCommand('GetCPUState');\n  }\n\n  getEmulatorState() {\n    console.log('get Emulator state called');\n    this.telemetryService.sendStringCommand('GetEmulatorState');\n  }\n\n  getMemoryContent() {\n    console.log('get Memory content called');\n    this.telemetryService.sendStringCommand('GetMemoryContent');\n  }\n}\n","module.exports = \"\\n<mat-card class=\\\"example-card\\\">\\n        <mat-card-header>\\n            <mat-card-title>Memory</mat-card-title>\\n            <mat-card-subtitle>Program counter window</mat-card-subtitle>\\n        </mat-card-header>\\n\\n\\n\\n\\n<mat-card-content #dataContainer>\\n        <div ></div>\\n</mat-card-content>\\n</mat-card>\\n\"","module.exports = \"mat-card {\\n  width: 400px;\\n  display: inline-grid; }\\n\\n.current-pc-highlight {\\n  background-color: yellow;\\n  color: red; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9hcHAvc3JjL2FwcC9tZW1vcnkvbWVtb3J5LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksWUFBWTtFQUNaLG9CQUFvQixFQUFBOztBQUd4QjtFQUNNLHdCQUF3QjtFQUN4QixVQUFVLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9tZW1vcnkvbWVtb3J5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsibWF0LWNhcmQge1xuICAgIHdpZHRoOiA0MDBweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZ3JpZDtcbiAgfVxuXG4uY3VycmVudC1wYy1oaWdobGlnaHQge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xuICAgICAgY29sb3I6IHJlZDtcbiAgfSJdfQ== */\"","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { TelemetryService } from '../services/telemetry.service';\nimport { Telemetry } from '../models/telemetry.model';\nimport { CPUState } from '../models/cpustate.model';\n\n@Component({\n  selector: 'app-memory',\n  templateUrl: './memory.component.html',\n  styleUrls: ['./memory.component.scss']\n})\nexport class MemoryComponent implements OnInit {\n\n  public memoryContent = 'blank';\n  public cpuState: CPUState;\n\n  @ViewChild('dataContainer') dataContainer: ElementRef;\n\n  loadData(data) {\n      this.dataContainer.nativeElement.innerHTML = data;\n  }\n\n  constructor(private telemetryService: TelemetryService) {\n\n    this.cpuState = new CPUState();\n\n    telemetryService.getTelemetry().subscribe((t: string) => {\n      const telemetry: Telemetry = JSON.parse(t);\n\n      if (telemetry.Command === 'GetCPUState') {\n        this.cpuState = JSON.parse(atob(telemetry.Payload));\n      }\n\n      if (telemetry.Command === 'GetMemoryContent') {\n\n        let byteCharacters = atob(telemetry.Payload);\n        let byteNumbers = new Array(byteCharacters.length);\n\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n\n        let byteArray = new Uint8Array(byteNumbers);\n\n        //console.log(byteArray);\n        let hexResult = '';\n        let cnt = 0;\n        let windowSize = 100;\n        let windowStart = 0;\n        let windowEnd = 0;\n\n        windowStart = this.cpuState.PC - windowSize;\n        while (windowStart % 16 !== 0) {\n          windowStart = windowStart - 1;\n        }\n        windowEnd = this.cpuState.PC + windowSize;\n        while (windowEnd % 16 !== 15) {\n          windowEnd = windowEnd + 1;\n        }\n\n        for (let byte of byteNumbers) {\n\n          // only print the window\n          if (cnt >= windowStart && cnt <= windowEnd) {\n\n            // highlight the current PC instruction\n            if (cnt === this.cpuState.PC) {\n              hexResult += '<span style=\"background-color: yellow;color: red;\" class=\"current-pc-highlight\">';\n            }\n\n            // tslint:disable-next-line:max-line-length\n            hexResult += (cnt % 16 ? ' ' : '<br/>' + (1e7 + (cnt).toString(16)).slice(-8) + ' | ') + (1e7 + byteArray[cnt].toString(16)).slice(-2);\n\n            if (cnt === this.cpuState.PC) {\n              hexResult += '</span>';\n            }\n          }\n          cnt++;\n        }\n\n        this.dataContainer.nativeElement.innerHTML = hexResult;\n      }\n    });\n  }\n\n  ngOnInit() {\n  }\n\n}\n","export class CPUState {\n    A: number;\n    Y: number;\n    X: number;\n    S: number;\n    P: number;\n    PC: number;\n    SP: number;\n    SP_LOW: number;\n    SP_HIGH: number;\n    InstructionType: number;\n    InstructionName: string;\n}\n","export class EmulatorState {\n    Delay: string;\n    CycleCount: string;\n    PauseFlag: boolean;\n    Debug: boolean;\n    Test: boolean;\n    BreakAddr: number;\n}\n","export class TableRow {\n    Name: string;\n    Value: string;\n}","export class Telemetry {\n    Command: string;\n    Parameter: string;\n    Payload: any;\n}\n","import { Injectable } from '@angular/core';\nimport { TableRow } from '../models/tablerow.model';\nimport { convertActionBinding } from '@angular/compiler/src/compiler_util/expression_converter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TablehelperService {\n\n  constructor() { }\n\n  public convertToTableRows(input: any): TableRow[] {\n    return this.convertToTableRowsWithBlackList(input, Array());\n  }\n\n  public convertToTableRowsWithBlackList(input: any, blackList: string[]): TableRow[] {\n\n    let result = [];\n\n     // Step 1. Get all the object keys.\n     const properties = Object.keys(input);\n     // Step 3. Iterate throw all keys.\n    for (const prop of properties) {\n      if (!blackList.includes(prop)) {\n        const row = new TableRow();\n        row.Name = prop.toString();\n\n        let value = input[prop];\n\n        if (typeof (value) === 'number') {\n          value = value.toString(16);\n        }\n\n        row.Value = value;\n        result.push(row);\n      }\n    }\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { WebsocketService } from './websocket.service';\nimport { Observable, Subscriber, observable, Subject } from 'rxjs';\nimport { map, filter, scan } from 'rxjs/operators';\nimport { Telemetry } from '../models/telemetry.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TelemetryService {\n\n  observableSocket: Subject<any>;\n\n  constructor(private webSocket: WebsocketService) {\n    const openSubscriber = Subscriber.create(() => console.log('connection opened'));\n    this.observableSocket = this.webSocket.createObservableSocket('ws://localhost:8080/ws', openSubscriber);\n  }\n  getTelemetry(): Subject<any> {\n    return this.observableSocket;\n  }\n\n  sendStringCommand(command: string) {\n    const telemetryRequest = new Telemetry();\n    telemetryRequest.Command = command;\n    this.sendCommand(telemetryRequest);\n  }\n\n  sendCommand(request: Telemetry) {\n    this.webSocket.send(JSON.stringify(request));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subscriber, Observable, Subject } from 'rxjs';\nimport { Telemetry } from '../models/telemetry.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebsocketService {\n\n  private ws: WebSocket;\n  private observable: Observable<any>;\n  private subject: Subject<any> = new Subject<any>();\n\n  createObservableSocket(url: string, openSubscriber: Subscriber<any>): Subject<any> {\n    this.ws = new WebSocket(url);\n    new Observable(observer => {\n      this.ws.onmessage = event => observer.next(event.data);\n      this.ws.onerror = event => observer.error(event);\n      this.ws.onclose = event => observer.complete();\n      this.ws.onopen = event => {\n        openSubscriber.next();\n        openSubscriber.complete();\n      };\n\n      return () => this.ws.close();\n    }).subscribe((data) => { this.subject.next(data); console.log(data); });\n\n    return this.subject;\n  }\n\n  send(message: any) {\n    this.ws.send(message);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}